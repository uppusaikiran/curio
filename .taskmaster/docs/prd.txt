<context>
# Curio: Product Requirements Document (PRD)

* **Version:** 1.0
* **Status:** In Development
* **Author:** Product Team
* **Last Updated:** 2025-07-02

---

### 1. Introduction & Vision

#### 1.1. Problem Statement
In an age of information overload, finding unique and genuinely personal cultural experiences is overwhelming. Users wade through generic top-10 lists, biased reviews, and fragmented recommendation algorithms that lack true context and personality. The process of discovery feels like a chore, not a joy.

#### 1.2. Product Vision
To transform cultural discovery from a search task into an inspiring conversation. Curio will be the world's most personal and engaging AI guide, making it effortless for anyone to discover experiences that deeply resonate with their unique tastes. We are replacing the search box with a conversation.

#### 1.3. Target Audience
* **The Adventurous Local (Primary Persona):** A 25-40 year old urban professional who is culturally curious and actively seeks novel experiences in their city. They value authenticity over hype and are looking for hidden gems in dining, arts, and music.
* **The Discerning Traveler (Secondary Persona):** A traveler who wants to experience a destination like a local, avoiding tourist traps. They have specific interests (e.g., jazz clubs, vintage shops, architectural history) and want an itinerary that reflects their passions.

---

### 2. Goals & Success Metrics

This section defines what "winnable" looks like in measurable terms.

| Goal | Key Success Metric (KPI) | How to Measure (for Hackathon/MVP) |
| :--- | :--- | :--- |
| **Deliver a "Wow" Experience** | **High User Engagement & Satisfaction** | **Session Completion Rate > 80%:** Percentage of users who complete the full loop (ask a question -> receive a video).<br>**Qualitative Feedback:** Collect user quotes during demos (e.g., "Wow, I've never heard of that place!"). |
| **Provide High-Quality Recommendations** | **Recommendation Relevance & Novelty** | **Relevance Score (1-5):** After a demo, ask users to rate how relevant the recommendation was.<br>**Novelty Score (1-5):** Ask users if they knew about the recommended item beforehand. A low score here is good. |
| **Prove Technical Feasibility** | **Performance & Reliability** | **End-to-End Latency < 15 seconds:** Time from user finishing speaking to Aria's video starting to play.<br>**Uptime / Success Rate > 95%:** The full API pipeline completes without errors during demos. |

---

### 3. Features & User Stories

This translates the high-level vision into actionable development tasks.

#### 3.1. Core Epic: First-Time User Recommendation
*As an adventurous local, I want to tell an AI my current mood and interests so that I can get a unique, personalized recommendation for something to do this weekend.*

**User Stories (MVP):**
* **US-101:** As a user, I want to be greeted by the video avatar "Aria" when I land on the page so I immediately understand the conversational nature of the app.
* **US-102:** As a user, I want to press a single button to start and stop recording my voice query so the input process is simple and intuitive.
* **US-103:** As a user, I want the system to process my voice query and deliver a video response from Aria so I can receive my recommendation in a personal and engaging format.
* **US-104:** As a user, I want the recommendation provided by Aria to be based on my stated interests and feel like it was chosen specifically for me.

#### 3.2. Out of Scope for MVP (Non-Goals)
To maintain focus, we are explicitly *not* building the following for the initial version:
* User accounts or login functionality.
* Conversation history or multi-turn memory.
* Text-based input or output.
* The ability to book, reserve, or purchase anything through the app.
* Any form of proactive notifications.

---

### 4. Technical Architecture & Design

#### 4.1. System Architecture
* **Frontend:** Next.js (React, TypeScript, Tailwind CSS)
    * **Audio Recording:** `react-media-recorder` for robust cross-browser support.
    * **State Management:** Zustand or React Context for managing app state (e.g., `isRecording`, `isLoading`, `videoUrl`).
    * **Video Player:** Standard HTML5 `<video>` element.
* **Backend:** Node.js (TypeScript, Fastify)
    * **Endpoint:** A single, primary endpoint `/api/conversation` to orchestrate the pipeline.
    * **API Integrations:**
        * **Speech-to-Text:** OpenAI Whisper API (for high accuracy).
        * **LLM:** OpenAI GPT-4o (for advanced reasoning and script generation).
        * **Cultural Data:** Qloo API.
        * **Voice Synthesis:** ElevenLabs API (for expressive, high-quality voice).
        * **Video Synthesis:** Tavus API (using pre-generated ElevenLabs audio as input for perfect lip-sync).
* **Deployment:** Vercel for both frontend and serverless backend functions, connected to GitHub for seamless CI/CD.

#### 4.2. Non-Functional Requirements
* **Performance:** The P95 latency for the `/api/conversation` endpoint should be under 15 seconds. The frontend should achieve a Lighthouse score of 90+ for performance.
* **Security:** All API keys must be stored as environment variables on the server-side and never exposed to the client.
* **Usability:** The interface must be intuitive enough to be used without instructions. The primary user flow should be completable in 3 clicks or less.
* **Scalability:** The backend will be deployed as serverless functions, allowing it to scale automatically with demand.

---

### 5. Development Plan & Risks

#### 5.1. Phased Development Roadmap
* **Phase 1: Foundation (Week 1)**
    * **Goal:** Establish technical foundations and de-risk API integrations.
    * **Tasks:** Project setup (GitHub, Vercel, Next.js, Fastify). Isolate and test each API call (`"Hello World"` for Qloo, ElevenLabs, Tavus, etc.). Build static frontend UI.
* **Phase 2: MVP Pipeline (Week 2)**
    * **Goal:** Achieve a full, end-to-end working loop.
    * **Tasks:** Connect all APIs in the backend orchestrator. A user can record audio, and it results in a (potentially unpolished) video response.
* **Phase 3: Polish & Refinement (Week 3)**
    * **Goal:** Elevate the experience from functional to delightful.
    * **Tasks:** Refine LLM prompts for Aria's persona. Improve UI/UX, add loading states and error handling. Optimize pipeline latency.
* **Phase 4: Demo Prep (Week 4)**
    * **Goal:** Create a flawless presentation.
    * **Tasks:** Feature freeze. Bug squashing. Record the final demo video. Prepare presentation slides and script.

#### 5.2. Risks & Mitigations

| Risk | Likelihood | Impact | Mitigation Strategy |
| :--- | :--- | :--- | :--- |
| **End-to-End Latency is too high** | Medium | High | **Primary:** Design UI to mask latency with engaging loading states. <br>**Secondary:** Investigate streaming responses where possible. |
| **API Integration Complexity** | High | High | **Primary:** Use official SDKs. Start with mock data for each service to develop frontend/backend in parallel. Isolate API tests. |
| **Inconsistent AI Persona** | Medium | Medium | **Primary:** Develop a "Persona Style Guide" early. Have one person own the final prompt engineering for consistency. |
| **Poor Lip-Sync in Video** | Low | High | **Primary:** Use the Tavus feature that accepts pre-generated audio. This ensures sync is handled by their platform. |

# Appendix  
- Qloo, ElevenLabs, Tavus, OpenAI API docs
- Example prompts and user flows
- Persona design notes for Aria
</PRD> 